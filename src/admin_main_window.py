# src/admin_main_window.py
from tkinter import ttk
import customtkinter as ctk
import db_manager as db

# –ü–µ—Ä–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ —Ç—É –∂ –≤–∫–ª–∞–¥–∫—É "–î–æ–≤—ñ–¥–Ω–∏–∫–∏" –∑ HR-–≤—ñ–∫–Ω–∞
# (—Ç–∞–º –º–∞—î –±—É—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–∏–π –∫–ª–∞—Å DirectoriesTab)
from hr_main_window import DirectoriesTab


class UsersTab(ctk.CTkFrame):
    """–í–∫–ª–∞–¥–∫–∞ '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ' –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –ø–µ—Ä–µ–≥–ª—è–¥ –æ–±–ª—ñ–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ (–∫–∞—Ä–∫–∞—Å)."""
    def __init__(self, master):
        super().__init__(master)
        self.pack_propagate(False)

        # –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å: –ø–æ—à—É–∫ + —Ñ—ñ–ª—å—Ç—Ä —Ä–æ–ª—ñ + –∫–Ω–æ–ø–∫–∏
        toolbar = ctk.CTkFrame(self, corner_radius=8)
        toolbar.pack(fill="x", padx=10, pady=(10, 6))

        self.search_var = ctk.StringVar()
        self.search_entry = ctk.CTkEntry(
            toolbar, textvariable=self.search_var, width=320,
            placeholder_text="–ü–æ—à—É–∫ (–ª–æ–≥—ñ–Ω, —Ä–æ–ª—å)"
        )
        self.search_entry.pack(side="left", padx=(8, 6), pady=8)
        self.search_entry.bind("<KeyRelease>", lambda e: self.refresh())

        ctk.CTkLabel(toolbar, text="–†–æ–ª—å:").pack(side="left", padx=(12, 4))
        self.role_var = ctk.StringVar(value="–£—Å—ñ")
        self.role_menu = ctk.CTkOptionMenu(
            toolbar,
            values=["–£—Å—ñ", "admin", "hr", "manager", "employee"],
            variable=self.role_var,
            width=140,
            command=lambda _: self.refresh()
        )
        self.role_menu.pack(side="left", padx=4, pady=8)

        self.btn_refresh = ctk.CTkButton(toolbar, text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", width=140, command=self.refresh)
        self.btn_refresh.pack(side="right", padx=8, pady=8)

        self.btn_clear_role = ctk.CTkButton(toolbar, text="üëÅ –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ", width=140,
                                    command=lambda: (self.role_var.set("–£—Å—ñ"), self.refresh()))
        self.btn_clear_role.pack(side="right", padx=8, pady=8)


        # –î—Ä—É–≥–∏–π —Ä—è–¥–æ–∫: (–∫–Ω–æ–ø–∫–∏ –¥—ñ–π ‚Äî –¥–æ–¥–∞–º–æ –ø—ñ–∑–Ω—ñ—à–µ)
        actions = ctk.CTkFrame(self, corner_radius=8)
        actions.pack(fill="x", padx=10, pady=(0, 6))
        ctk.CTkLabel(actions, text="–î—ñ—ó –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ (–±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ: –î–æ–¥–∞—Ç–∏ / –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ / –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ / –°–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–æ–ª—å)").pack(
            side="left", padx=10, pady=6
        )

        # –¢–∞–±–ª–∏—Ü—è
        table_wrap = ctk.CTkFrame(self, corner_radius=8)
        table_wrap.pack(fill="both", expand=True, padx=10, pady=(6, 10))

        self.scroll_y = ctk.CTkScrollbar(table_wrap); self.scroll_y.pack(side="right", fill="y")
        self.scroll_x = ctk.CTkScrollbar(table_wrap, orientation="horizontal"); self.scroll_x.pack(side="bottom", fill="x")

        self.columns = ("username", "role", "full_name", "department", "position", "is_active", "created_at")

        self.tree = ttk.Treeview(table_wrap, columns=self.columns, show="headings", height=20)
        self.tree.pack(fill="both", expand=True, padx=6, pady=6)

        self.tree.configure(yscrollcommand=self.scroll_y.set, xscrollcommand=self.scroll_x.set)
        self.scroll_y.configure(command=self.tree.yview)
        self.scroll_x.configure(command=self.tree.xview)

        self.tree.heading("username",  text="–õ–æ–≥—ñ–Ω")
        self.tree.heading("role",      text="–†–æ–ª—å")
        self.tree.heading("full_name", text="–ü–Ü–ë")
        self.tree.heading("department",text="–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è")
        self.tree.heading("position",  text="–ü–æ—Å–∞–¥–∞")
        self.tree.heading("is_active", text="–ê–∫—Ç–∏–≤–Ω–∏–π")
        self.tree.heading("created_at",text="–°—Ç–≤–æ—Ä–µ–Ω–æ")

        self.tree.column("username",   width=200, anchor="w")
        self.tree.column("role",       width=120, anchor="center")
        self.tree.column("full_name",  width=240, anchor="w")
        self.tree.column("department", width=200, anchor="w")
        self.tree.column("position",   width=180, anchor="w")
        self.tree.column("is_active",  width=100, anchor="center")
        self.tree.column("created_at", width=160, anchor="center")

        self.refresh()

    def refresh(self):
        q = (self.search_var.get() or "").strip().lower()
        role_filter = self.role_var.get()

        users = db.get_users()
        rows = []
        for u in users:
            if role_filter != "–£—Å—ñ" and (u.get("role") or "") != role_filter:
                continue
            hay = f"{u.get('username','')} {u.get('role','')} {u.get('full_name','')}".lower()
            if q and q not in hay:
                continue
            rows.append({
                "id": u["id"],
                "username": u.get("username") or "",
                "role": u.get("role") or "",
                "full_name": u.get("full_name") or "",
                "department": u.get("department_name") or "",
                "position": u.get("position_name") or "",
                "is_active": "—Ç–∞–∫" if (u.get("is_active") == 1) else "–Ω—ñ",
                "created_at": (u.get("created_at") or "")[:19],
            })

        for iid in self.tree.get_children():
            self.tree.delete(iid)
        for r in rows:
            self.tree.insert(
                "", "end", iid=str(r["id"]),
                values=(r["username"], r["role"], r["full_name"], r["department"], r["position"], r["is_active"], r["created_at"])
            )



class AdminMainWindow(ctk.CTkToplevel):
    """–ì–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, –î–æ–≤—ñ–¥–Ω–∏–∫–∏, –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–∫–∞—Ä–∫–∞—Å)."""
    def __init__(self, master, current_user: dict):
        super().__init__(master)
        self.current_user = current_user

        self.title("HR-IS ‚Äî –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä")
        self.state("zoomed")  # –¥–ª—è Windows ‚Äî –≤—ñ–¥–∫—Ä–∏—î —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏–º


        # –¶–µ–Ω—Ç—Ä—É—î–º–æ –ø–æ–≤–µ—Ä—Ö –≤—ñ–∫–Ω–∞ –ª–æ–≥—ñ–Ω—É
        self.update_idletasks()
        px, py = master.winfo_rootx(), master.winfo_rooty()
        pw, ph = master.winfo_width(), master.winfo_height()
        w, h = 1280, 800
        x = px + max(0, (pw - w) // 2); y = py + max(0, (ph - h) // 3)
        self.geometry(f"{w}x{h}+{x}+{y}")

        # –í–µ—Ä—Ö–Ω—ñ–π –±–∞—Ä (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)
        top = ctk.CTkFrame(self, corner_radius=0)
        top.pack(fill="x", padx=0, pady=0)
        title_font = ctk.CTkFont(size=18, weight="bold")
        ctk.CTkLabel(top, text="–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", font=title_font).pack(side="left", padx=16, pady=10)
        ctk.CTkLabel(top, text=f"–í–∏ —É–≤—ñ–π—à–ª–∏ —è–∫: {current_user.get('username','admin')} (admin)").pack(side="right", padx=16)

        # Tabview –∑ —Ç—Ä—å–æ–º–∞ –≤–∫–ª–∞–¥–∫–∞–º–∏
        self.tabview = ctk.CTkTabview(self)
        self.tabview.pack(fill="both", expand=True, padx=10, pady=10)

        self.users_tab = self.tabview.add("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
        self.directories_tab = self.tabview.add("–î–æ–≤—ñ–¥–Ω–∏–∫–∏")
        self.settings_tab = self.tabview.add("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")

        # –í–∫–ª–∞–¥–∫–∞ "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ"
        UsersTab(self.users_tab).pack(fill="both", expand=True)

        # –í–∫–ª–∞–¥–∫–∞ "–î–æ–≤—ñ–¥–Ω–∏–∫–∏" ‚Äî –ø–µ—Ä–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        DirectoriesTab(self.directories_tab).pack(fill="both", expand=True)

        # –í–∫–ª–∞–¥–∫–∞ "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è" ‚Äî –ø–æ–∫–∏ –∑–∞–≥–ª—É—à–∫–∞
        ctk.CTkLabel(self.settings_tab, text="–†–æ–∑–¥—ñ–ª —É —Ä–æ–∑—Ä–æ–±—Ü—ñ (—Ä–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó, –±–µ–∑–ø–µ–∫–∞, –∞—É–¥–∏—Ç —Ç–æ—â–æ).",
                     font=ctk.CTkFont(size=14)).pack(pady=40)

        # –ê–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ –∑–∞ –∑–∞–º–æ–≤—á–∞–Ω–Ω—è–º ‚Äî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
        self.tabview.set("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")


    def _on_close(self):
        """–ó–∞–∫—Ä–∏–≤–∞—î–º–æ Toplevel —ñ –≥–æ–ª–æ–≤–Ω–∏–π –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π root, —â–æ–± –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–æ."""
        try:
            self.destroy()
        finally:
            try:
                if self.master:  # —Ü–µ –Ω–∞—à –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π root
                    self.master.destroy()
            except Exception:
                pass



if __name__ == "__main__":
    import customtkinter as ctk
    root = ctk.CTk()
    root.withdraw()
    AdminMainWindow(root, current_user={"username": "admin", "role": "admin"})
    root.mainloop()   # ‚Üê –≥–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –Ω–∞ root
