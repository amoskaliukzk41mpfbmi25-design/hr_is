from datetime import datetime
from tkinter import ttk
import customtkinter as ctk
import db_manager as db
from tkinter import messagebox
from documents_tab import DocumentsTab



class DashboardTab(ctk.CTkFrame):
    """–í–∫–ª–∞–¥–∫–∞ '–ì–æ–ª–æ–≤–Ω–∞' –∑ KPI-–∫–∞—Ä—Ç–∫–∞–º–∏ —Ç–∞ —à–≤–∏–¥–∫–∏–º–∏ –¥—ñ—è–º–∏."""
    def __init__(self, master):
        super().__init__(master)
        self.pack_propagate(False)

        # –°–µ–∫—Ü—ñ—è KPI (–≤–µ—Ä—Ö)
        kpi_wrap = ctk.CTkFrame(self, corner_radius=12)
        kpi_wrap.pack(fill="x", padx=10, pady=(10, 6))

        self.kpi_total = self._kpi_card(kpi_wrap, "–£—Å—å–æ–≥–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤", "‚Äî")
        self.kpi_hired = self._kpi_card(kpi_wrap, "–ù–æ–≤—ñ –∑–∞ 30 –¥–Ω—ñ–≤", "‚Äî")
        self.kpi_dismissed = self._kpi_card(kpi_wrap, "–ó–≤—ñ–ª—å–Ω–µ–Ω—ñ –∑–∞ 30 –¥–Ω—ñ–≤", "‚Äî")
        self.kpi_deps = self._kpi_card(kpi_wrap, "–ê–∫—Ç–∏–≤–Ω—ñ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è", "‚Äî")

        # –†—è–¥–∫–æ–º: —Ä–æ–∑—Ç–∞—à—É—î–º–æ –∫–∞—Ä—Ç–∫–∏ –ø–æ—Ä—É—á
        for i, card in enumerate((self.kpi_total, self.kpi_hired, self.kpi_dismissed, self.kpi_deps)):
            card.grid(row=0, column=i, padx=10, pady=10, sticky="nsew")
            kpi_wrap.grid_columnconfigure(i, weight=1)

        # –°–µ–∫—Ü—ñ—è —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π (–Ω–∏–∑)
        actions = ctk.CTkFrame(self, corner_radius=12)
        actions.pack(fill="x", padx=10, pady=(6, 10))

        btn_add_emp = ctk.CTkButton(actions, text="‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞", width=200, command=self._todo)
        btn_doc = ctk.CTkButton(actions, text="üßæ –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç", width=200, state="disabled")
        btn_export = ctk.CTkButton(actions, text="üìÑ –ï–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫—É", width=200, command=self._todo)

        btn_add_emp.pack(side="left", padx=10, pady=10)
        btn_doc.pack(side="left", padx=10, pady=10)
        btn_export.pack(side="left", padx=10, pady=10)

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ KPI
        self.reload_kpis()

    def _kpi_card(self, parent, title, value_text):
        frame = ctk.CTkFrame(parent, corner_radius=12)
        title_lbl = ctk.CTkLabel(frame, text=title, font=ctk.CTkFont(size=16, weight="bold"))
        value_lbl = ctk.CTkLabel(frame, text=value_text, font=ctk.CTkFont(size=28, weight="bold"))
        title_lbl.pack(pady=(14, 6))
        value_lbl.pack(pady=(0, 14))
        # –ó–±–µ—Ä–µ–∂–µ–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ü–∏—Ñ—Ä—É:
        frame.value_lbl = value_lbl
        return frame

    def reload_kpis(self):
        try:
            total = db.count_employees_total()
            hired = db.count_employees_hired_last_30d()
            dismissed = db.count_employees_dismissed_last_30d()
            deps = db.count_departments()
        except Exception as e:
            total = hired = dismissed = deps = "‚Äî"
            print("KPI error:", e)

        self.kpi_total.value_lbl.configure(text=str(total))
        self.kpi_hired.value_lbl.configure(text=str(hired))
        self.kpi_dismissed.value_lbl.configure(text=str(dismissed))
        self.kpi_deps.value_lbl.configure(text=str(deps))

    def _todo(self):
        # –¢–∏–º—á–∞—Å–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ ‚Äî –ø—ñ–∑–Ω—ñ—à–µ –ø—ñ–¥–≤ º—è–∂–µ–º–æ —Ä–µ–∞–ª—å–Ω—ñ –¥—ñ—ó
        ctk.CTkMessagebox(title="–ü—ñ–∑–Ω—ñ—à–µ", message="–§—É–Ω–∫—Ü—ñ—è –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –¥–∞–ª—ñ.")
        # –Ø–∫—â–æ –Ω–µ–º–∞—î CTkMessagebox ‚Äî –∑–∞–º—ñ–Ω–∏ –Ω–∞ print –∞–±–æ –∑—Ä–æ–±–∏–º–æ –≤–ª–∞—Å–Ω–µ –¥—ñ–∞–ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ.

class EmployeesTab(ctk.CTkFrame):
    """–¢–∞–±–ª–∏—Ü—è + —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è + –ø–æ—à—É–∫ + —Ñ—ñ–ª—å—Ç—Ä–∏ + –ø–∞–Ω–µ–ª—å –¥—ñ–π (Edit –ø—Ä–∞—Ü—é—î)."""
    def __init__(self, master):
        super().__init__(master)
        self.pack_propagate(False)

        # ---- –°—Ç–∞–Ω ----
        self.current_sort = {"col": None, "direction": "asc"}
        self.all_rows = []   # –ø–æ–≤–Ω–∏–π –Ω–∞–±—ñ—Ä (–∑ id!)
        self.rows = []       # –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π –Ω–∞–±—ñ—Ä
        self._search_after_id = None

        # ---- –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å: –ø–æ—à—É–∫ + —Ñ—ñ–ª—å—Ç—Ä–∏ ----
        filters_bar = ctk.CTkFrame(self, corner_radius=8)
        filters_bar.pack(fill="x", padx=10, pady=(10, 6))

        # –ü–æ—à—É–∫
        self.search_var = ctk.StringVar()
        self.search_entry = ctk.CTkEntry(
            filters_bar, textvariable=self.search_var, width=360,
            placeholder_text="–ü–æ—à—É–∫ (–ü–Ü–ë, email, —Ç–µ–ª–µ—Ñ–æ–Ω, –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è, –ø–æ—Å–∞–¥–∞)"
        )
        self.search_entry.pack(side="left", padx=(8, 4), pady=8)
        self.search_var.trace_add("write", lambda *_: self._debounced_search())
        self.search_entry.bind("<Return>", lambda e: self.apply_filters())

        self.btn_search = ctk.CTkButton(filters_bar, text="üîç –ó–Ω–∞–π—Ç–∏", width=110, command=self.apply_filters)
        self.btn_search.pack(side="left", padx=4, pady=8)

        ctk.CTkLabel(filters_bar, text="|").pack(side="left", padx=6)

        # –§—ñ–ª—å—Ç—Ä–∏
        deps = ["–£—Å—ñ"] + [d["name"] for d in db.get_departments()]
        poss = ["–£—Å—ñ"] + [p["name"] for p in db.get_positions()]
        statuses = ["–£—Å—ñ", "–∞–∫—Ç–∏–≤–Ω–∏–π", "–≤—ñ–¥–ø—É—Å—Ç–∫–∞", "–∑–≤—ñ–ª—å–Ω–µ–Ω–∏–π", "–ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ"]

        self.dep_var = ctk.StringVar(value="–£—Å—ñ")
        self.pos_var = ctk.StringVar(value="–£—Å—ñ")
        self.status_var = ctk.StringVar(value="–£—Å—ñ")

        self.dep_menu = ctk.CTkOptionMenu(filters_bar, values=deps, variable=self.dep_var, width=180, command=lambda _: self.apply_filters())
        self.pos_menu = ctk.CTkOptionMenu(filters_bar, values=poss, variable=self.pos_var, width=180, command=lambda _: self.apply_filters())
        self.status_menu = ctk.CTkOptionMenu(filters_bar, values=statuses, variable=self.status_var, width=150, command=lambda _: self.apply_filters())

        ctk.CTkLabel(filters_bar, text="–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:").pack(side="left", padx=(10, 4))
        self.dep_menu.pack(side="left", padx=4, pady=8)

        ctk.CTkLabel(filters_bar, text="–ü–æ—Å–∞–¥–∞:").pack(side="left", padx=(10, 4))
        self.pos_menu.pack(side="left", padx=4, pady=8)

        ctk.CTkLabel(filters_bar, text="–°—Ç–∞—Ç—É—Å:").pack(side="left", padx=(10, 4))
        self.status_menu.pack(side="left", padx=4, pady=8)

        self.btn_clear = ctk.CTkButton(filters_bar, text="‚úñ –°–∫–∏–Ω—É—Ç–∏", width=110, command=self.clear_filters)
        self.btn_clear.pack(side="right", padx=8, pady=8)

        self.btn_refresh = ctk.CTkButton(filters_bar, text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫", width=160, command=self.load_data)
        self.btn_refresh.pack(side="right", padx=8, pady=8)

        # ---- –î—Ä—É–≥–∏–π —Ä—è–¥–æ–∫: –ø–∞–Ω–µ–ª—å –¥—ñ–π ----
        actions_bar = ctk.CTkFrame(self, corner_radius=8)
        actions_bar.pack(fill="x", padx=10, pady=(0, 6))

        self.btn_add = ctk.CTkButton(actions_bar, text="‚ûï –î–æ–¥–∞—Ç–∏", width=120, state="disabled")
        self.btn_add.pack(side="left", padx=6, pady=8)

        self.btn_edit = ctk.CTkButton(actions_bar, text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", width=120, command=self.edit_selected)
        self.btn_edit.pack(side="left", padx=6, pady=8)

        self.btn_delete = ctk.CTkButton(actions_bar, text="üóë –í–∏–¥–∞–ª–∏—Ç–∏", width=120, state="disabled")
        self.btn_delete.pack(side="left", padx=6, pady=8)

        # ---- –¢–∞–±–ª–∏—Ü—è ----
        table_frame = ctk.CTkFrame(self, corner_radius=8)
        table_frame.pack(fill="both", expand=True, padx=10, pady=(6, 10))

        self.tree_scroll_y = ctk.CTkScrollbar(table_frame); self.tree_scroll_y.pack(side="right", fill="y")
        self.tree_scroll_x = ctk.CTkScrollbar(table_frame, orientation="horizontal"); self.tree_scroll_x.pack(side="bottom", fill="x")

        self.columns = ("full_name", "email", "phone", "department", "position", "hire_date", "employment_status")
        self.tree = ttk.Treeview(table_frame, columns=self.columns, show="headings", height=20)
        self.tree.pack(fill="both", expand=True, padx=6, pady=6)

        self.tree.configure(yscrollcommand=self.tree_scroll_y.set, xscrollcommand=self.tree_scroll_x.set)
        self.tree_scroll_y.configure(command=self.tree.yview)
        self.tree_scroll_x.configure(command=self.tree.xview)

        headings = {
            "full_name": "–ü–Ü–ë",
            "email": "Email",
            "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
            "department": "–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è",
            "position": "–ü–æ—Å–∞–¥–∞",
            "hire_date": "–î–∞—Ç–∞ –ø—Ä–∏–π–Ω—è—Ç—Ç—è",
            "employment_status": "–°—Ç–∞—Ç—É—Å",
        }
        for col in self.columns:
            self.tree.heading(col, text=headings[col], command=lambda col=col: self.sort_by(col))

        self.tree.column("full_name",  width=260, anchor="w")
        self.tree.column("email",      width=220, anchor="w")
        self.tree.column("phone",      width=130, anchor="center")
        self.tree.column("department", width=220, anchor="w")
        self.tree.column("position",   width=180, anchor="w")
        self.tree.column("hire_date",  width=130, anchor="center")
        self.tree.column("employment_status", width=130, anchor="center")

        # –î–∞–Ω—ñ + –ø–æ–¥—ñ—ó
        self.load_data()
        self.tree.bind("<Double-1>", lambda e: self.edit_selected())

    # ---------- –î–∞–Ω—ñ ----------
    def load_data(self):
        """–ß–∏—Ç–∞—î –∑ –ë–î —ñ –≥–æ—Ç—É—î self.all_rows (–∑ id); –∑–∞—Å—Ç–æ—Å–æ–≤—É—î –ø–æ—à—É–∫/—Ñ—ñ–ª—å—Ç—Ä–∏/—Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —ñ —Ä–µ–Ω–¥–µ—Ä."""
        emps = db.get_employees()  # —Ç—É—Ç —î e.id
        self.all_rows = [{
            "id": e.get("id"),
            "full_name": e.get("full_name") or "",
            "email": e.get("email") or "",
            "phone": e.get("phone") or "",
            "department": e.get("department") or "",
            "position": e.get("position") or "",
            "hire_date": e.get("hire_date") or "",
            "employment_status": e.get("employment_status") or "",
        } for e in emps]
        self.apply_filters()

    # ---------- –ü–æ—à—É–∫/—Ñ—ñ–ª—å—Ç—Ä–∏ ----------
    def _debounced_search(self):
        if self._search_after_id:
            self.after_cancel(self._search_after_id)
        self._search_after_id = self.after(300, self.apply_filters)

    def apply_filters(self):
        q = (self.search_var.get() or "").strip().lower()
        dep = self.dep_var.get(); pos = self.pos_var.get(); status = self.status_var.get()

        # 1) –ø–æ—à—É–∫
        if not q:
            filtered = list(self.all_rows)
        else:
            def matches(r):
                hay = " ".join([r["full_name"], r["email"], r["phone"], r["department"], r["position"]]).lower()
                return q in hay
            filtered = [r for r in self.all_rows if matches(r)]

        # 2) —Ñ—ñ–ª—å—Ç—Ä–∏
        if dep != "–£—Å—ñ":     filtered = [r for r in filtered if r["department"] == dep]
        if pos != "–£—Å—ñ":     filtered = [r for r in filtered if r["position"] == pos]
        if status != "–£—Å—ñ":  filtered = [r for r in filtered if r["employment_status"] == status]

        self.rows = filtered

        # 3) —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è/—Ä–µ–Ω–¥–µ—Ä
        if self.current_sort["col"]:
            self.apply_sort()
        else:
            self.render_rows()

    def clear_filters(self):
        self.search_var.set("")
        self.dep_var.set("–£—Å—ñ"); self.pos_var.set("–£—Å—ñ"); self.status_var.set("–£—Å—ñ")
        self.rows = list(self.all_rows)
        if self.current_sort["col"]:
            self.apply_sort()
        else:
            self.render_rows()

    # ---------- –†–µ–Ω–¥–µ—Ä ----------
    def render_rows(self):
        for row_id in self.tree.get_children():
            self.tree.delete(row_id)
        for r in self.rows:
            # –í–ê–ñ–õ–ò–í–û: –∑–±–µ—Ä—ñ–≥–∞—î–º–æ id —É iid –µ–ª–µ–º–µ–Ω—Ç–∞
            self.tree.insert("", "end", iid=str(r["id"]), values=(
                r["full_name"], r["email"], r["phone"],
                r["department"], r["position"], r["hire_date"], r["employment_status"]
            ))

    # ---------- –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è ----------
    def sort_by(self, col: str):
        if self.current_sort["col"] == col:
            self.current_sort["direction"] = "desc" if self.current_sort["direction"] == "asc" else "asc"
        else:
            self.current_sort = {"col": col, "direction": "asc"}
        self.apply_sort()

    def apply_sort(self):
        col = self.current_sort["col"]; reverse = (self.current_sort["direction"] == "desc")

        def key_func(r):
            val = r.get(col, "")
            if col == "hire_date" and val:
                try: return datetime.fromisoformat(val)
                except ValueError: return datetime.min
            return (val or "").lower()

        self.rows.sort(key=key_func, reverse=reverse)
        self.render_rows(); self.update_heading_arrows()

    def update_heading_arrows(self):
        headings = {
            "full_name": "–ü–Ü–ë", "email": "Email", "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
            "department": "–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è", "position": "–ü–æ—Å–∞–¥–∞",
            "hire_date": "–î–∞—Ç–∞ –ø—Ä–∏–π–Ω—è—Ç—Ç—è", "employment_status": "–°—Ç–∞—Ç—É—Å",
        }
        for col in self.columns:
            text = headings[col]
            if col == self.current_sort["col"]:
                text += " ‚ñ≤" if self.current_sort["direction"] == "asc" else " ‚ñº"
            self.tree.heading(col, text=text, command=lambda col=col: self.sort_by(col))

    # ---------- –î—ñ—ó ----------
    def edit_selected(self):
        sel = self.tree.selection()
        if not sel:
            messagebox.showwarning("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ —É —Ç–∞–±–ª–∏—Ü—ñ.")
            return
        emp_id = int(sel[0])
        data = db.get_employee_raw(emp_id)
        if not data:
            messagebox.showerror("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞.")
            return
        EditEmployeeDialog(self, emp_id, data, on_saved=self.load_data)


class EditEmployeeDialog(ctk.CTkToplevel):
    """–ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é –ø–æ—Å–∞–¥ –∑–∞ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è–º."""
    def __init__(self, master, emp_id: int, data: dict, on_saved=None):
        super().__init__(master)
        self.emp_id = emp_id
        self.on_saved = on_saved

        self.title("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞")
        self.resizable(True, True)
        self.minsize(720, 520)

        # –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è
        parent = master.winfo_toplevel()
        self.update_idletasks()
        pw, ph = parent.winfo_width(), parent.winfo_height()
        px, py = parent.winfo_rootx(), parent.winfo_rooty()
        w, h = 820, 560
        x = px + (pw - w) // 2
        y = py + (ph - h) // 3
        self.geometry(f"{w}x{h}+{x}+{y}")
        self.transient(parent); self.grab_set(); self.focus_force()

        # –î–æ–≤—ñ–¥–Ω–∏–∫–∏
        self.deps = db.get_departments()
        self.poss = db.get_positions()

        # –ú–∞–ø–∏ id <-> name
        self.dep_by_id = {d["id"]: d["name"] for d in self.deps}
        self.dep_by_name = {v: k for k, v in self.dep_by_id.items()}
        self.pos_by_id = {p["id"]: p["name"] for p in self.poss}
        self.pos_by_name = {v: k for k, v in self.pos_by_id.items()}

        # –ó–Ω–∞—á–µ–Ω–Ω—è
        self.last_name  = ctk.StringVar(value=data["last_name"])
        self.first_name = ctk.StringVar(value=data["first_name"])
        self.middle_name= ctk.StringVar(value=data["middle_name"] or "")
        self.birth_date = ctk.StringVar(value=data["birth_date"] or "")
        self.email      = ctk.StringVar(value=data["email"] or "")
        self.phone      = ctk.StringVar(value=data["phone"] or "")
        self.hire_date  = ctk.StringVar(value=data["hire_date"] or "")
        self.status     = ctk.StringVar(value=data["employment_status"] or "–∞–∫—Ç–∏–≤–Ω–∏–π")

        dep_name_init = self.dep_by_id.get(data.get("department_id"), "‚Äî")
        pos_name_init = self.pos_by_id.get(data.get("position_id"), "‚Äî")
        self.dep_name_var = ctk.StringVar(value=dep_name_init or "‚Äî")
        self.pos_name_var = ctk.StringVar(value=pos_name_init or "‚Äî")

        # –†–æ–∑–º—ñ—Ç–∫–∞ (grid)
        form = ctk.CTkFrame(self, corner_radius=8)
        form.pack(fill="both", expand=True, padx=16, pady=16)
        form.grid_columnconfigure(1, weight=1)

        def row(r, label, widget):
            ctk.CTkLabel(form, text=label, anchor="w").grid(row=r, column=0, sticky="ew", padx=(6, 10), pady=6)
            widget.grid(row=r, column=1, sticky="ew", pady=6)

        row(0, "–ü—Ä—ñ–∑–≤–∏—â–µ", ctk.CTkEntry(form, textvariable=self.last_name))
        row(1, "–Ü–º'—è", ctk.CTkEntry(form, textvariable=self.first_name))
        row(2, "–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ", ctk.CTkEntry(form, textvariable=self.middle_name))
        row(3, "–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (YYYY-MM-DD)", ctk.CTkEntry(form, textvariable=self.birth_date))
        row(4, "Email", ctk.CTkEntry(form, textvariable=self.email))
        row(5, "–¢–µ–ª–µ—Ñ–æ–Ω", ctk.CTkEntry(form, textvariable=self.phone))

        # –ú–µ–Ω—é "–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è"
        self.dep_menu = ctk.CTkOptionMenu(form,
            values=["‚Äî"] + [d["name"] for d in self.deps],
            variable=self.dep_name_var,
            width=220,
            command=self.on_department_change  # –∫–ª—é—á–æ–≤–µ: —Ä–µ–∞–∫—Ü—ñ—è –Ω–∞ –≤–∏–±—ñ—Ä
        )
        row(6, "–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è", self.dep_menu)

        # –ú–µ–Ω—é "–ü–æ—Å–∞–¥–∞" (–∑–Ω–∞—á–µ–Ω–Ω—è –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–∏–º–æ –≤ on_department_change)
        self.pos_menu = ctk.CTkOptionMenu(form,
            values=["‚Äî"],
            variable=self.pos_name_var,
            width=220
        )
        row(7, "–ü–æ—Å–∞–¥–∞", self.pos_menu)

        row(8, "–î–∞—Ç–∞ –ø—Ä–∏–π–Ω—è—Ç—Ç—è (YYYY-MM-DD)", ctk.CTkEntry(form, textvariable=self.hire_date))
        status_menu = ctk.CTkOptionMenu(form, values=["–∞–∫—Ç–∏–≤–Ω–∏–π","–≤—ñ–¥–ø—É—Å—Ç–∫–∞","–∑–≤—ñ–ª—å–Ω–µ–Ω–∏–π","–ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ"], variable=self.status, width=220)
        row(9, "–°—Ç–∞—Ç—É—Å", status_menu)

        # –ö–Ω–æ–ø–∫–∏
        btns = ctk.CTkFrame(self); btns.pack(fill="x", padx=16, pady=(0,16))
        ctk.CTkButton(btns, text="–°–∫–∞—Å—É–≤–∞—Ç–∏", width=140, fg_color="gray", hover_color="darkgray",
                      command=self.destroy).pack(side="right", padx=6)
        ctk.CTkButton(btns, text="–ó–±–µ—Ä–µ–≥—Ç–∏", width=140, command=self.save).pack(side="right", padx=6)

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–∞–¥ –ø—ñ–¥ –ø–æ—Ç–æ—á–Ω–µ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è
        self.on_department_change(self.dep_name_var.get())

    # --- –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å–∞–¥ –∑–∞ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è–º ---
    def on_department_change(self, selected_dep_name: str):
        dep_id = self.dep_by_name.get(selected_dep_name)
        if dep_id:
            allowed = db.get_positions_by_department(dep_id)
            options = ["‚Äî"] + [p["name"] for p in allowed]
        else:
            options = ["‚Äî"]
        self.pos_menu.configure(values=options)

        # —è–∫—â–æ –ø–æ—Ç–æ—á–Ω–∞ –ø–æ—Å–∞–¥–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç—å —É –¥–æ–∑–≤–æ–ª–µ–Ω—ñ ‚Äî —Å–∫–∏–Ω–µ–º–æ –Ω–∞ "‚Äî"
        if self.pos_name_var.get() not in options:
            self.pos_name_var.set("‚Äî")

    def save(self):
        # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
        if not self.last_name.get().strip() or not self.first_name.get().strip():
            messagebox.showwarning("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞", "–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏.")
            return
        for dv in (self.birth_date.get().strip(), self.hire_date.get().strip()):
            if dv and len(dv) != 10:
                messagebox.showwarning("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞", "–î–∞—Ç–∏ –º–∞—é—Ç—å —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD.")
                return

        dep_id = self.dep_by_name.get(self.dep_name_var.get())
        pos_id = self.pos_by_name.get(self.pos_name_var.get())

        # —è–∫—â–æ –æ–±–∏–¥–≤–∞ –≤–∏–±—Ä–∞–Ω—ñ ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –∑–≤'—è–∑–∫—É
        if dep_id and pos_id and not db.is_position_allowed_for_department(pos_id, dep_id):
            messagebox.showwarning("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞", "–û–±—Ä–∞–Ω–∞ –ø–æ—Å–∞–¥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è.")
            return

        payload = {
            "last_name": self.last_name.get().strip(),
            "first_name": self.first_name.get().strip(),
            "middle_name": self.middle_name.get().strip() or None,
            "birth_date": self.birth_date.get().strip() or None,
            "email": self.email.get().strip() or None,
            "phone": self.phone.get().strip() or None,
            "department_id": dep_id,
            "position_id": pos_id,
            "hire_date": self.hire_date.get().strip() or None,
            "employment_status": self.status.get().strip() or "–∞–∫—Ç–∏–≤–Ω–∏–π",
        }

        try:
            db.update_employee(self.emp_id, payload)
            if self.on_saved:
                self.after(1, self.on_saved)
            self.after(1, self.destroy)
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏: {e}")







class HRMainWindow(ctk.CTk):
    def __init__(self, current_user=None):
        super().__init__()

        self.title("HR –ü–∞–Ω–µ–ª—å | –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ª—ñ–∫–∞—Ä–Ω—ñ")
        self.minsize(1024, 700)
        self.state("zoomed")
        self.after(0, lambda: self.state("zoomed"))

        self.current_user = current_user or {"username": "hr_user", "role": "hr"}

        self.tabview = ctk.CTkTabview(self)
        self.tabview.pack(fill="both", expand=True, padx=20, pady=20)

        # –í–∫–ª–∞–¥–∫–∏
        self.dashboard_tab = self.tabview.add("–ì–æ–ª–æ–≤–Ω–∞")
        self.employees_tab = self.tabview.add("–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∏")
        self.directories_tab = self.tabview.add("–î–æ–≤—ñ–¥–Ω–∏–∫–∏")   # –ù–û–í–ï
        self.documents_tab = self.tabview.add("–î–æ–∫—É–º–µ–Ω—Ç–∏")


        # –ì–æ–ª–æ–≤–Ω–∞
        dash = DashboardTab(self.dashboard_tab)
        dash.pack(fill="both", expand=True)

        # –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∏
        emps = EmployeesTab(self.employees_tab)
        emps.pack(fill="both", expand=True)

        # –î–æ–≤—ñ–¥–Ω–∏–∫–∏ (–Ω–æ–≤–∞ split-view –≤–∫–ª–∞–¥–∫–∞)
        dirs_tab = DirectoriesTab(self.directories_tab)
        dirs_tab.pack(fill="both", expand=True)


        # –î–æ–∫—É–º–µ–Ω—Ç–∏ (–Ω–æ–≤–∞ –≤–∫–ª–∞–¥–∫–∞)
        from documents_tab import DocumentsTab  # <--- –¥–æ–¥–∞–π —ñ–º–ø–æ—Ä—Ç —É–≥–æ—Ä—ñ —Ñ–∞–π–ª—É
        docs_tab = DocumentsTab(self.documents_tab, current_user=self.current_user)
        docs_tab.pack(fill="both", expand=True)



from tkinter import messagebox

class DirectoriesTab(ctk.CTkFrame):
    """Split-view: –ª—ñ–≤–æ—Ä—É—á –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è, –ø—Ä–∞–≤–æ—Ä—É—á –ü–æ—Å–∞–¥–∏ (—Ñ—ñ–ª—å—Ç—Ä –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–º –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è–º)."""
    def __init__(self, master):
        super().__init__(master)
        self.pack_propagate(False)

        # –í–µ—Ä—Ö–Ω—ñ–π —Ä—è–¥–æ–∫ –∑ –ø—ñ–¥–∫–∞–∑–∫–æ—é
        header = ctk.CTkFrame(self, corner_radius=8)
        header.pack(fill="x", padx=10, pady=(10, 6))
        ctk.CTkLabel(header, text="–ö–µ—Ä—É–π—Ç–µ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è–º–∏ —Ç–∞ –ø–æ—Å–∞–¥–∞–º–∏. –í–∏–±—ñ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—É—î —Å–ø–∏—Å–æ–∫ –ø–æ—Å–∞–¥ –ø—Ä–∞–≤–æ—Ä—É—á.",
                     font=ctk.CTkFont(size=14)).pack(side="left", padx=10, pady=8)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–≤–æ—Ö –ø–∞–Ω–µ–ª–µ–π
        body = ctk.CTkFrame(self, corner_radius=8)
        body.pack(fill="both", expand=True, padx=10, pady=(6, 10))
        body.grid_columnconfigure(0, weight=1)  # departments
        body.grid_columnconfigure(1, weight=1)  # positions
        body.grid_rowconfigure(1, weight=1)

        # ===== –õ—ñ–≤–∞ –ø–∞–Ω–µ–ª—å: –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è =====
        ctk.CTkLabel(body, text="–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è", font=ctk.CTkFont(size=16, weight="bold")).grid(row=0, column=0, sticky="w", padx=10, pady=(10,0))

        dep_toolbar = ctk.CTkFrame(body, corner_radius=6)
        dep_toolbar.grid(row=1, column=0, sticky="new", padx=(10,6), pady=(6,6))
        dep_toolbar.grid_columnconfigure(0, weight=1)

        self.dep_search_var = ctk.StringVar()
        dep_search = ctk.CTkEntry(dep_toolbar, textvariable=self.dep_search_var, placeholder_text="–ü–æ—à—É–∫ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è")
        dep_search.grid(row=0, column=0, sticky="ew", padx=6, pady=6)
        dep_search.bind("<KeyRelease>", lambda e: self.refresh_departments())

        dep_btns = ctk.CTkFrame(dep_toolbar)
        dep_btns.grid(row=0, column=1, sticky="e", padx=6, pady=6)
        ctk.CTkButton(dep_btns, text="‚ûï –î–æ–¥–∞—Ç–∏", width=100, command=self.add_department).pack(side="left", padx=4)
        ctk.CTkButton(dep_btns, text="‚úèÔ∏è –ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏", width=140, command=self.rename_department).pack(side="left", padx=4)
        ctk.CTkButton(dep_btns, text="üóë –í–∏–¥–∞–ª–∏—Ç–∏", width=110, command=self.delete_department).pack(side="left", padx=4)



        dep_table_frame = ctk.CTkFrame(body, corner_radius=6)
        dep_table_frame.grid(row=2, column=0, sticky="nsew", padx=(10,6), pady=(0,10))

        self.dep_tree = ttk.Treeview(dep_table_frame, columns=("name","emp_count"), show="headings", height=18)
        self.dep_tree.heading("name", text="–ù–∞–∑–≤–∞")
        self.dep_tree.heading("emp_count", text="–ö-—Å—Ç—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤")
        self.dep_tree.column("name", width=320, anchor="w")
        self.dep_tree.column("emp_count", width=140, anchor="center")
        self.dep_tree.pack(fill="both", expand=True, padx=6, pady=6)

        self.dep_tree.bind("<<TreeviewSelect>>", lambda e: self.refresh_positions())

        # ===== –ü—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å: –ü–æ—Å–∞–¥–∏ =====
        ctk.CTkLabel(body, text="–ü–æ—Å–∞–¥–∏", font=ctk.CTkFont(size=16, weight="bold")).grid(row=0, column=1, sticky="w", padx=10, pady=(10,0))

        pos_toolbar = ctk.CTkFrame(body, corner_radius=6)
        pos_toolbar.grid(row=1, column=1, sticky="new", padx=(6,10), pady=(6,6))
        pos_toolbar.grid_columnconfigure(0, weight=1)

        self.pos_search_var = ctk.StringVar()
        pos_search = ctk.CTkEntry(pos_toolbar, textvariable=self.pos_search_var, placeholder_text="–ü–æ—à—É–∫ –ø–æ—Å–∞–¥–∏")
        pos_search.grid(row=0, column=0, sticky="ew", padx=6, pady=6)
        pos_search.bind("<KeyRelease>", lambda e: self.refresh_positions())

        pos_btns = ctk.CTkFrame(pos_toolbar)
        pos_btns.grid(row=0, column=1, sticky="e", padx=6, pady=6)
        ctk.CTkButton(pos_btns, text="‚ûï –î–æ–¥–∞—Ç–∏", width=100, command=self.add_position).pack(side="left", padx=4)
        ctk.CTkButton(pos_btns, text="‚úèÔ∏è –ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏", width=140, command=self.rename_position).pack(side="left", padx=4)
        ctk.CTkButton(pos_btns, text="üóë –í–∏–¥–∞–ª–∏—Ç–∏", width=110, command=self.delete_position).pack(side="left", padx=4)
        ctk.CTkButton(pos_btns, text="üëÅ –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ", width=120, command=self.clear_department_selection).pack(side="left", padx=4)

        pos_table_frame = ctk.CTkFrame(body, corner_radius=6)
        pos_table_frame.grid(row=2, column=1, sticky="nsew", padx=(6,10), pady=(0,10))

        self.pos_tree = ttk.Treeview(pos_table_frame, columns=("name","emp_count"), show="headings", height=18)
        self.pos_tree.heading("name", text="–ù–∞–∑–≤–∞")
        self.pos_tree.heading("emp_count", text="–ö-—Å—Ç—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤")
        self.pos_tree.column("name", width=320, anchor="w")
        self.pos_tree.column("emp_count", width=140, anchor="center")
        self.pos_tree.pack(fill="both", expand=True, padx=6, pady=6)

        # –ü–æ—á–∞—Ç–∫–æ–≤–µ –Ω–∞–ø–æ–≤–Ω–µ–Ω–Ω—è
        self.refresh_departments()
        self.refresh_positions()

    # ===== –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å =====
    def refresh_departments(self):
        q = (self.dep_search_var.get() or "").strip().lower()
        deps = db.get_departments()
        # –¥–æ–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
        data = []
        for d in deps:
            if q and q not in d["name"].lower():
                continue
            cnt = db.count_employees_in_department(d["id"])
            data.append({"id": d["id"], "name": d["name"], "emp_count": cnt})

        for iid in self.dep_tree.get_children():
            self.dep_tree.delete(iid)
        for d in data:
            self.dep_tree.insert("", "end", iid=str(d["id"]), values=(d["name"], d["emp_count"]))

        # –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–¥—ñ–ª–µ–Ω—å ‚Äî –æ–Ω–æ–≤–∏–º–æ –π –ø–æ—Å–∞–¥–∏ (–±–æ —Ñ—ñ–ª—å—Ç—Ä –∑–∞–ª–µ–∂–∏—Ç—å)
        self.refresh_positions()

    def refresh_positions(self):
        q = (self.pos_search_var.get() or "").strip().lower()
        # —è–∫—â–æ –≤–∏–±—Ä–∞–Ω–µ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ –ø–æ—Å–∞–¥–∏
        sel = self.dep_tree.selection()
        if sel:
            dep_id = int(sel[0])
            poss = db.get_positions_by_department(dep_id)
        else:
            poss = db.get_all_positions()

        data = []
        for p in poss:
            if q and q not in p["name"].lower():
                continue
            cnt = db.count_employees_in_position(p["id"])
            data.append({"id": p["id"], "name": p["name"], "emp_count": cnt})

        for iid in self.pos_tree.get_children():
            self.pos_tree.delete(iid)
        for p in data:
            self.pos_tree.insert("", "end", iid=str(p["id"]), values=(p["name"], p["emp_count"]))

    # ===== –î—ñ—ó: –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è =====
    def add_department(self):
        name = self._prompt_text("–ù–æ–≤–µ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è", "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:")
        if not name: return
        try:
            db.add_department(name.strip())
            self.refresh_departments()
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏: {e}")

    def rename_department(self):
        sel = self.dep_tree.selection()
        if not sel:
            messagebox.showwarning("–ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è.")
            return
        dep_id = int(sel[0])
        old = self.dep_tree.item(sel[0], "values")[0]
        new_name = self._prompt_text("–ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è", "–ù–æ–≤–∞ –Ω–∞–∑–≤–∞:", initial=old)
        if not new_name: return
        try:
            db.rename_department(dep_id, new_name.strip())
            self.refresh_departments()
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏: {e}")

    def delete_department(self):
        sel = self.dep_tree.selection()
        if not sel:
            messagebox.showwarning("–í–∏–¥–∞–ª–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è.")
            return
        dep_id = int(sel[0])
        if db.count_employees_in_department(dep_id) > 0:
            messagebox.showwarning("–ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", "–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏: —É –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—ñ —î –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∏.")
            return
        if not messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–í–∏–¥–∞–ª–∏—Ç–∏ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è?"):
            return
        try:
            db.delete_department(dep_id)
            self.refresh_departments()
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏: {e}")

    def clear_department_selection(self):
        sel = self.dep_tree.selection()
        if sel:
            self.dep_tree.selection_remove(sel[0])
        self.refresh_positions()



    # ===== –î—ñ—ó: –ü–æ—Å–∞–¥–∏ =====
    def add_position(self):
        name = self._prompt_text("–ù–æ–≤–∞ –ø–æ—Å–∞–¥–∞", "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ—Å–∞–¥–∏:")
        if not name:
            return
        try:
            new_id = db.add_position(name.strip())  # —Ç–µ–ø–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î id
            # —è–∫—â–æ –≤–∏–±—Ä–∞–Ω–µ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ‚Äî –æ–¥—Ä–∞–∑—É –ø—Ä–∏–≤'—è–∑—É—î–º–æ
            sel = self.dep_tree.selection()
            if sel:
                dep_id = int(sel[0])
                db.link_position_to_department(new_id, dep_id)
            self.refresh_positions()
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏: {e}")


    def rename_position(self):
        sel = self.pos_tree.selection()
        if not sel:
            messagebox.showwarning("–ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–∞–¥—É.")
            return
        pos_id = int(sel[0])
        old = self.pos_tree.item(sel[0], "values")[0]
        new_name = self._prompt_text("–ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å–∞–¥—É", "–ù–æ–≤–∞ –Ω–∞–∑–≤–∞:", initial=old)
        if not new_name: return
        try:
            db.rename_position(pos_id, new_name.strip())
            self.refresh_positions()
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏: {e}")

    def delete_position(self):
        sel = self.pos_tree.selection()
        if not sel:
            messagebox.showwarning("–í–∏–¥–∞–ª–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–∞–¥—É.")
            return
        pos_id = int(sel[0])
        if db.count_employees_in_position(pos_id) > 0:
            messagebox.showwarning("–ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", "–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏: –∑ —Ü—ñ—î—é –ø–æ—Å–∞–¥–æ—é –ø–æ–≤'—è–∑–∞–Ω—ñ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∏.")
            return
        if not messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å–∞–¥—É?"):
            return
        try:
            db.delete_position(pos_id)
            self.refresh_positions()
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏: {e}")

    # ===== –î–æ–ø–æ–º—ñ–∂–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –¥—ñ–∞–ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ =====
    def _prompt_text(self, title: str, label: str, initial: str = "") -> str | None:
        # –ü—Ä–æ—Å—Ç–∏–π –º–æ–¥–∞–ª—å–Ω–∏–π CTkToplevel –∑ –æ–¥–Ω–∏–º Entry
        dlg = ctk.CTkToplevel(self)
        dlg.title(title)
        dlg.geometry("480x160")
        dlg.transient(self.winfo_toplevel())
        dlg.grab_set()

        wrap = ctk.CTkFrame(dlg, corner_radius=8)
        wrap.pack(fill="both", expand=True, padx=16, pady=16)

        ctk.CTkLabel(wrap, text=label).pack(anchor="w", pady=(0,6))
        var = ctk.StringVar(value=initial)
        entry = ctk.CTkEntry(wrap, textvariable=var)
        entry.pack(fill="x")
        entry.focus_set()

        btns = ctk.CTkFrame(wrap)
        btns.pack(fill="x", pady=(12,0))
        res = {"value": None}
        def ok():
            v = (var.get() or "").strip()
            res["value"] = v if v else None
            dlg.destroy()
        def cancel():
            res["value"] = None
            dlg.destroy()
        ctk.CTkButton(btns, text="OK", width=120, command=ok).pack(side="right", padx=6)
        ctk.CTkButton(btns, text="–°–∫–∞—Å—É–≤–∞—Ç–∏", width=120, fg_color="gray", hover_color="darkgray", command=cancel).pack(side="right", padx=6)
        dlg.wait_window()
        return res["value"]




if __name__ == "__main__":
    app = HRMainWindow(current_user={"username": "hr_koval", "role": "hr"})
    app.mainloop()
